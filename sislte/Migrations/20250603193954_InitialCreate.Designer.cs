// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using sislte.Core;

#nullable disable

namespace sislte.Migrations
{
    [DbContext(typeof(SisContext))]
    [Migration("20250603193954_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("sislte.Models.Advisor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Advisors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "",
                            FullName = "",
                            Password = ""
                        });
                });

            modelBuilder.Entity("sislte.Models.Announce", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Announces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateOnly(2025, 6, 7),
                            Message = "The system will be down for maintenance this weekend.",
                            Title = "System Maintenance"
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateOnly(2025, 6, 3),
                            Message = "Final exam schedule is now available.",
                            Title = "Exam Schedule Released"
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateOnly(2025, 5, 28),
                            Message = "New digital resources have been added to the library.",
                            Title = "Library Update"
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateOnly(2025, 6, 15),
                            Message = "The university will be closed on June 15 for National Day.",
                            Title = "Holiday Notice"
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateOnly(2025, 7, 5),
                            Message = "Graduation ceremony will be held on July 5 at 10 AM.",
                            Title = "Graduation Ceremony"
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateOnly(2025, 6, 1),
                            Message = "Check out the updated cafeteria menu for this month.",
                            Title = "New Cafeteria Menu"
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateOnly(2025, 6, 10),
                            Message = "Fall semester course registration opens next Monday.",
                            Title = "Course Registration"
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateOnly(2025, 6, 4),
                            Message = "IT helpdesk will be unavailable on June 4 from 2–4 PM.",
                            Title = "IT Support Downtime"
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateOnly(2025, 6, 2),
                            Message = "Please complete the end-of-term feedback survey.",
                            Title = "Survey Reminder"
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateOnly(2025, 6, 5),
                            Message = "Visit the career center for summer internship listings.",
                            Title = "New Internship Opportunities"
                        });
                });

            modelBuilder.Entity("sislte.Models.AttendanceEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("GradeId")
                        .HasColumnType("integer");

                    b.Property<int>("Presence")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("AttendanceEntries");
                });

            modelBuilder.Entity("sislte.Models.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DetailedStudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DetailedStudentId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("sislte.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Ects")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Theory")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IT 113",
                            Ects = 3,
                            Name = "Information management",
                            Theory = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "IT 115",
                            Ects = 3,
                            Name = "Information technologies",
                            Theory = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "IT 188",
                            Ects = 7,
                            Name = "Computer-aided design",
                            Theory = 2
                        },
                        new
                        {
                            Id = 4,
                            Code = "IT 205",
                            Ects = 7,
                            Name = "Object oriented programming",
                            Theory = 2
                        },
                        new
                        {
                            Id = 5,
                            Code = "IT 252",
                            Ects = 5,
                            Name = "Basics of programming- 2",
                            Theory = 2
                        },
                        new
                        {
                            Id = 6,
                            Code = "IT 338",
                            Ects = 6,
                            Name = "Internet Technologies",
                            Theory = 2
                        },
                        new
                        {
                            Id = 7,
                            Code = "IT 383",
                            Ects = 7,
                            Name = "Computer modeling",
                            Theory = 2
                        },
                        new
                        {
                            Id = 8,
                            Code = "IT 385",
                            Ects = 7,
                            Name = "Management in information systems",
                            Theory = 2
                        },
                        new
                        {
                            Id = 9,
                            Code = "IT 386",
                            Ects = 6,
                            Name = "Web programming",
                            Theory = 2
                        },
                        new
                        {
                            Id = 10,
                            Code = "IT 387",
                            Ects = 7,
                            Name = "Introduction to multi-platform programming",
                            Theory = 2
                        },
                        new
                        {
                            Id = 11,
                            Code = "IT 388",
                            Ects = 7,
                            Name = "Modern programming languages- 2",
                            Theory = 2
                        },
                        new
                        {
                            Id = 12,
                            Code = "IT 390",
                            Ects = 7,
                            Name = "Mobile application design",
                            Theory = 2
                        },
                        new
                        {
                            Id = 13,
                            Code = "IT 437",
                            Ects = 6,
                            Name = "Machine Learning",
                            Theory = 2
                        },
                        new
                        {
                            Id = 14,
                            Code = "IT 451",
                            Ects = 6,
                            Name = "Data Mining and Storing",
                            Theory = 2
                        },
                        new
                        {
                            Id = 15,
                            Code = "IT 485",
                            Ects = 6,
                            Name = "Database programming",
                            Theory = 2
                        },
                        new
                        {
                            Id = 16,
                            Code = "IT 487",
                            Ects = 6,
                            Name = "Data analytics and information management",
                            Theory = 2
                        },
                        new
                        {
                            Id = 17,
                            Code = "MINF 273",
                            Ects = 7,
                            Name = "Mathematical programming",
                            Theory = 2
                        },
                        new
                        {
                            Id = 18,
                            Code = "BA 108",
                            Ects = 3,
                            Name = "Principles of Entrepreneurship and Introduction to Business",
                            Theory = 1
                        },
                        new
                        {
                            Id = 19,
                            Code = "BA 111",
                            Ects = 9,
                            Name = "Fundamentals of Management",
                            Theory = 1
                        },
                        new
                        {
                            Id = 20,
                            Code = "ECON 163",
                            Ects = 9,
                            Name = "Engineering Economics",
                            Theory = 1
                        },
                        new
                        {
                            Id = 21,
                            Code = "ENG 010",
                            Ects = 5,
                            Name = "English for business and academic communication (reading and writing)",
                            Theory = 0
                        },
                        new
                        {
                            Id = 22,
                            Code = "ENG 020",
                            Ects = 5,
                            Name = "English for business and academic communication (listening and speaking)",
                            Theory = 0
                        },
                        new
                        {
                            Id = 23,
                            Code = "ENG 030",
                            Ects = 5,
                            Name = "English for business and academic communication (for academic purposes)",
                            Theory = 0
                        },
                        new
                        {
                            Id = 24,
                            Code = "GER 010",
                            Ects = 5,
                            Name = "German business and academic communication (reading and writing)",
                            Theory = 0
                        },
                        new
                        {
                            Id = 25,
                            Code = "GER 020",
                            Ects = 5,
                            Name = "German for business and academic communication (listening and speaking)",
                            Theory = 0
                        },
                        new
                        {
                            Id = 26,
                            Code = "GER 030",
                            Ects = 5,
                            Name = "German for business and academic communication (for academic purposes)",
                            Theory = 0
                        },
                        new
                        {
                            Id = 27,
                            Code = "LAW 110",
                            Ects = 3,
                            Name = "Constitution of Republic of Azerbaijan and Fundamentals of Law",
                            Theory = 1
                        },
                        new
                        {
                            Id = 28,
                            Code = "MATH 285",
                            Ects = 5,
                            Name = "Numerical analysis",
                            Theory = 2
                        },
                        new
                        {
                            Id = 29,
                            Code = "MINF 167",
                            Ects = 3,
                            Name = "Logic",
                            Theory = 1
                        },
                        new
                        {
                            Id = 30,
                            Code = "PA 139",
                            Ects = 3,
                            Name = "Politology",
                            Theory = 1
                        },
                        new
                        {
                            Id = 31,
                            Code = "PHIL 159",
                            Ects = 3,
                            Name = "Philosophy",
                            Theory = 1
                        },
                        new
                        {
                            Id = 32,
                            Code = "SOC 110",
                            Ects = 3,
                            Name = "Sociology",
                            Theory = 1
                        },
                        new
                        {
                            Id = 33,
                            Code = "SOC 150",
                            Ects = 3,
                            Name = "Introduction to Multiculturalism",
                            Theory = 1
                        },
                        new
                        {
                            Id = 34,
                            Code = "SOC 180",
                            Ects = 3,
                            Name = "Ethics and aesthetics",
                            Theory = 1
                        });
                });

            modelBuilder.Entity("sislte.Models.CourseProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CoursePrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ES",
                            Lang = "AZ",
                            Name = "Economics"
                        },
                        new
                        {
                            Id = 2,
                            Code = "CE",
                            Lang = "EN",
                            Name = "Computer Engineering"
                        },
                        new
                        {
                            Id = 3,
                            Code = "CS",
                            Lang = "EN",
                            Name = "Computer Science"
                        },
                        new
                        {
                            Id = 4,
                            Code = "IT",
                            Lang = "AZ",
                            Name = "Information Technology"
                        },
                        new
                        {
                            Id = 5,
                            Code = "IT",
                            Lang = "EN",
                            Name = "Information Technology"
                        });
                });

            modelBuilder.Entity("sislte.Models.Course_CourseProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseProgramId");

                    b.ToTable("Course_CourseProgram");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 17,
                            CourseProgramId = 2
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 3,
                            CourseProgramId = 5
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 29,
                            CourseProgramId = 1
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 8,
                            CourseProgramId = 3
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 12,
                            CourseProgramId = 4
                        },
                        new
                        {
                            Id = 6,
                            CourseId = 21,
                            CourseProgramId = 1
                        },
                        new
                        {
                            Id = 7,
                            CourseId = 5,
                            CourseProgramId = 3
                        },
                        new
                        {
                            Id = 8,
                            CourseId = 33,
                            CourseProgramId = 5
                        },
                        new
                        {
                            Id = 9,
                            CourseId = 1,
                            CourseProgramId = 2
                        },
                        new
                        {
                            Id = 10,
                            CourseId = 26,
                            CourseProgramId = 4
                        });
                });

            modelBuilder.Entity("sislte.Models.DetailedStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AdvisorId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("EarnedCredits")
                        .HasColumnType("integer");

                    b.Property<string>("Education")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmergencyPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("EntranceDate")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Gpa")
                        .HasColumnType("double precision");

                    b.Property<DateOnly>("GraduateDate")
                        .HasColumnType("date");

                    b.Property<double>("Loans")
                        .HasColumnType("double precision");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ScholarshipId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.HasIndex("ScholarshipId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("DetailedStudents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdvisorId = 1,
                            BirthDate = new DateOnly(1999, 9, 10),
                            EarnedCredits = 30,
                            Education = "",
                            EmergencyPhone = "",
                            EntranceDate = new DateOnly(2020, 5, 1),
                            FullName = "",
                            Gpa = 3.9700000000000002,
                            GraduateDate = new DateOnly(2024, 5, 1),
                            Loans = 0.0,
                            Location = "",
                            Phone = "",
                            StudentId = 1
                        });
                });

            modelBuilder.Entity("sislte.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Act1")
                        .HasColumnType("integer");

                    b.Property<int>("Act2")
                        .HasColumnType("integer");

                    b.Property<int>("Att")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<int>("Final")
                        .HasColumnType("integer");

                    b.Property<int>("Iw")
                        .HasColumnType("integer");

                    b.Property<string>("Mark")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudentSemesterId")
                        .HasColumnType("integer");

                    b.Property<int>("Sum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.HasIndex("StudentSemesterId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Act1 = 14,
                            Act2 = 13,
                            Att = 9,
                            CourseId = 1,
                            Final = 48,
                            Iw = 10,
                            Mark = "A",
                            StudentSemesterId = 1,
                            Sum = 94
                        },
                        new
                        {
                            Id = 2,
                            Act1 = 12,
                            Act2 = 14,
                            Att = 10,
                            CourseId = 2,
                            Final = 45,
                            Iw = 9,
                            Mark = "A",
                            StudentSemesterId = 1,
                            Sum = 90
                        },
                        new
                        {
                            Id = 3,
                            Act1 = 11,
                            Act2 = 13,
                            Att = 8,
                            CourseId = 3,
                            Final = 40,
                            Iw = 9,
                            Mark = "B",
                            StudentSemesterId = 1,
                            Sum = 81
                        },
                        new
                        {
                            Id = 4,
                            Act1 = 10,
                            Act2 = 12,
                            Att = 7,
                            CourseId = 4,
                            Final = 38,
                            Iw = 9,
                            Mark = "C",
                            StudentSemesterId = 1,
                            Sum = 76
                        },
                        new
                        {
                            Id = 5,
                            Act1 = 9,
                            Act2 = 11,
                            Att = 8,
                            CourseId = 5,
                            Final = 34,
                            Iw = 8,
                            Mark = "C",
                            StudentSemesterId = 1,
                            Sum = 70
                        });
                });

            modelBuilder.Entity("sislte.Models.Scholarship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Scholarships");
                });

            modelBuilder.Entity("sislte.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("DetailedStudentId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DetailedStudentId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("sislte.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarURL = "/avatars/default.jpg",
                            Email = "a@a.az",
                            Password = "$2a$11$/fnIBRXxHuq8k18X4RmkfuY.eut31s.ZyyVn/Qe/M8DAw73CkLOjK",
                            Role = 2
                        });
                });

            modelBuilder.Entity("sislte.Models.StudentCourseProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lang")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TranscriptId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TranscriptId")
                        .IsUnique();

                    b.ToTable("StudentCoursePrograms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "IT1",
                            Lang = "EN",
                            Name = "Information Technologies",
                            TranscriptId = 1
                        });
                });

            modelBuilder.Entity("sislte.Models.StudentSemester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("StudentCourseProgramId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentCourseProgramId");

                    b.ToTable("Semesters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateOnly(2026, 6, 3),
                            StartDate = new DateOnly(2025, 12, 3),
                            StudentCourseProgramId = 1
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateOnly(2027, 6, 3),
                            StartDate = new DateOnly(2026, 12, 3),
                            StudentCourseProgramId = 1
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateOnly(2028, 6, 3),
                            StartDate = new DateOnly(2027, 12, 3),
                            StudentCourseProgramId = 1
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateOnly(2029, 6, 3),
                            StartDate = new DateOnly(2028, 12, 3),
                            StudentCourseProgramId = 1
                        });
                });

            modelBuilder.Entity("sislte.Models.Transcript", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DetailedStudentId")
                        .HasColumnType("integer");

                    b.Property<double?>("Gpa")
                        .HasColumnType("double precision");

                    b.Property<int?>("Sac")
                        .HasColumnType("integer");

                    b.Property<int?>("Tacc")
                        .HasColumnType("integer");

                    b.Property<int?>("Tatc")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DetailedStudentId")
                        .IsUnique();

                    b.ToTable("Transcripts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DetailedStudentId = 1
                        });
                });

            modelBuilder.Entity("sislte.Models.AttendanceEntry", b =>
                {
                    b.HasOne("sislte.Models.Grade", "Grade")
                        .WithMany("AttendanceEntries")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("sislte.Models.Club", b =>
                {
                    b.HasOne("sislte.Models.DetailedStudent", null)
                        .WithMany("JoinedClubs")
                        .HasForeignKey("DetailedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sislte.Models.Course_CourseProgram", b =>
                {
                    b.HasOne("sislte.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sislte.Models.CourseProgram", null)
                        .WithMany()
                        .HasForeignKey("CourseProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sislte.Models.DetailedStudent", b =>
                {
                    b.HasOne("sislte.Models.Advisor", "Advisor")
                        .WithMany("AdvisedStudents")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sislte.Models.Scholarship", "Scholarship")
                        .WithMany()
                        .HasForeignKey("ScholarshipId");

                    b.HasOne("sislte.Models.Student", "Student")
                        .WithOne("DetailedStudent")
                        .HasForeignKey("sislte.Models.DetailedStudent", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Advisor");

                    b.Navigation("Scholarship");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("sislte.Models.Grade", b =>
                {
                    b.HasOne("sislte.Models.Course", "Course")
                        .WithOne()
                        .HasForeignKey("sislte.Models.Grade", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("sislte.Models.StudentSemester", "StudentSemester")
                        .WithMany("Grades")
                        .HasForeignKey("StudentSemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("StudentSemester");
                });

            modelBuilder.Entity("sislte.Models.Skill", b =>
                {
                    b.HasOne("sislte.Models.DetailedStudent", null)
                        .WithMany("Skills")
                        .HasForeignKey("DetailedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sislte.Models.StudentCourseProgram", b =>
                {
                    b.HasOne("sislte.Models.Transcript", "Transcript")
                        .WithOne("StudentCourseProgram")
                        .HasForeignKey("sislte.Models.StudentCourseProgram", "TranscriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transcript");
                });

            modelBuilder.Entity("sislte.Models.StudentSemester", b =>
                {
                    b.HasOne("sislte.Models.StudentCourseProgram", "StudentCourseProgram")
                        .WithMany("StudentSemesters")
                        .HasForeignKey("StudentCourseProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentCourseProgram");
                });

            modelBuilder.Entity("sislte.Models.Transcript", b =>
                {
                    b.HasOne("sislte.Models.DetailedStudent", "DetailedStudent")
                        .WithOne("Transcript")
                        .HasForeignKey("sislte.Models.Transcript", "DetailedStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DetailedStudent");
                });

            modelBuilder.Entity("sislte.Models.Advisor", b =>
                {
                    b.Navigation("AdvisedStudents");
                });

            modelBuilder.Entity("sislte.Models.DetailedStudent", b =>
                {
                    b.Navigation("JoinedClubs");

                    b.Navigation("Skills");

                    b.Navigation("Transcript")
                        .IsRequired();
                });

            modelBuilder.Entity("sislte.Models.Grade", b =>
                {
                    b.Navigation("AttendanceEntries");
                });

            modelBuilder.Entity("sislte.Models.Student", b =>
                {
                    b.Navigation("DetailedStudent");
                });

            modelBuilder.Entity("sislte.Models.StudentCourseProgram", b =>
                {
                    b.Navigation("StudentSemesters");
                });

            modelBuilder.Entity("sislte.Models.StudentSemester", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("sislte.Models.Transcript", b =>
                {
                    b.Navigation("StudentCourseProgram")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
